{
  username ? "nekroze",
  variant ? "laptop"
}:
with import <nixpkgs> {};
with import <nixhome> { inherit stdenv; inherit pkgs; };
with lib;
let
  ## Customizable
  preferedFont = "Fira Code";
  preferedShell = "zsh";
  preferedEditor = "nvim";
  preferedTerminal = "kitty";
  vifmTheme = "solarized-dark";
  zshTheme = "spaceship";
  ## Repositories
  termiteSolarized = fetchgit {
    url = "https://github.com/alpha-omega/termite-colors-solarized.git";
    rev = "e7bccb4fc563f71febce32819babf5d855ef3337";
    sha256 = "1ja49d2062bb3b8wkk3yh9w0wwxai5nq2dpawsxnih9gkfy4rxin";
  };
  vimPlug = fetchgit {
    url = "https://github.com/junegunn/vim-plug.git";
    rev = "e6a775e0df3180d3cfea55b351aa7b112c58c139";
    sha256 = "1zigz3p9hbqr0rf07v98rrszl9mgr9xx1ai4pjqnl0z0m8pya62w";
  };
  solarizedDirColors = fetchgit {
    url = "https://github.com/seebi/dircolors-solarized.git";
    rev = "2720cb1ff508bc358f9414f63370f0c6cd767b98";
    sha256 = "1mk7d7l6v4vfgkp3005533yd4gldm07cjqmqs6fxzwjjwj7l5qbf";
  };
  solarizedXresources = fetchgit {
    url = "https://github.com/solarized/xresources.git";
    rev = "025ceddbddf55f2eb4ab40b05889148aab9699fc";
    sha256 = "0lxv37gmh38y9d3l8nbnsm1mskcv10g3i83j0kac0a2qmypv1k9f";
  };
  vifmColors = fetchgit {
    url = "https://github.com/vifm/vifm-colors.git";
    rev = "235f9e8728810cfa6c0e07974dbd72ac9158f745";
    sha256 = "0yn9d4ra77ky2hba34d2dccfcmbjk31gp6xkd3g8zv3621kpijfy";
  };
  zshNotify = fetchgit {
    url = "https://github.com/t413/zsh-background-notify.git";
    rev = "d5f0430cb052f82c433c17707816910da87e201e";
    sha256 = "0p8fk50bxr8kg2v72afg7f2n09n9ap0yn7gz1i78nd54l0wc041n";
  };
  vimDsnips = fetchgit {
    url = "https://github.com/kiith-sa/DSnips.git";
    rev = "dc7239e94a3d52af1f63110344adb8b9f5868a81";
    sha256 = "1y3nwbqh9lrxw4l7jn84s67s7bfyvsng71rz2lckg38j33dr7xyy";
  };
  spaceship = fetchgit {
    url = "https://github.com/denysdovhan/spaceship-prompt.git";
    rev = "1b8a45b84025af571ccdeb813e78d40af739866d";
    sha256 = "18gk4zxxv31mkay1lj48cwm0zxz64vmw0c4183j46sdgq7qxija0";
  };
  zshSyntaxHighlighting = fetchgit {
    url = "https://github.com/zsh-users/zsh-syntax-highlighting.git";
    rev = "db6cac391bee957c20ff3175b2f03c4817253e60";
    sha256 = "1q2cq6lymbrznzmd6klrikybay6r99cwd4f83x1mkn9qvk17zn4c";
  };
  zshAutoSuggestions = fetchgit {
    url = "https://github.com/zsh-users/zsh-autosuggestions.git";
    rev = "ebaf409002be498a681267a75f5efcaf45cd0ccc";
    sha256 = "0a9xvabikndac2j29rppwzhsxgzsp40c0wsvh444j71p3xb1qrs6";
  };
  zshExplainShell = fetchgit {
    url = "git://github.com/gmatheu/zsh-explain-shell.git";
    rev = "f308812830fc20d76c54f3f13b8aba6eaa6e5a45";
    sha256 = "109m728263wsmffnn5xmzcxc8m1b64vr3skbd6x8ci8yfjqbdscd";
  };
  zshInteractiveCD = fetchgit {
    url = "https://github.com/changyuheng/zsh-interactive-cd.git";
    rev = "cded98f0ba28266722112e3ab43f97117a632090";
    sha256 = "13h04axpilp6x1bvgxkbbz9kd8j6plx1gww4day543ic47lwi8rf";
  };
  shMarkEdit = fetchgit {
    url = "https://github.com/zakariaGatter/MarkEdit.git";
    rev = "c3ea86d12c84e689dc4d6aacfa95f4eb54bdb60f";
    sha256 = "1r57x4v4fc8k2b1la7p2la5l6haa1zlf1gpz37aj03g4lvp2aw6j";
  };
  zshNixShell = fetchgit {
    url = "https://github.com/chisui/zsh-nix-shell.git";
    rev = "ac820013566f5f68d94b45c3c893cc478a245800";
    sha256 = "06pcf6sn92ydhssli4fixks2ppps8qvfi0a5ny40sgncrjwyx5nj";
  };
  zshSolarizedMan = fetchgit {
    url = "https://github.com/zlsun/solarized-man.git";
    rev = "a902b64696271efee95f37d45589078fdfbbddc5";
    sha256 = "04gm4qm17s49s6h9klbifgilxv8i45sz3rg521dwm599gl3fgmnv";
  };

  gtkSolarized = ((pkgs.callPackage ./.config/dotfiles/numix-solarized.nix) { });
  dotfiles = ./.config/dotfiles;
  mkDesktop = name: exec: ''
    [Desktop Entry]
    Type=Application
    Encoding=UTF-8
    Name=${name}
    Exec=${exec}
    Terminal=false
  '';
  writeFishScript = name: text:
    writeTextFile {
      inherit name;
      executable = true;
      text = ''
        #!${pkgs.fish}/bin/fish
        ${text}
        '';
      checkPhase = ''
        export HOME=$(mktemp -d)
        mkdir -p $HOME
        ${pkgs.fish}/bin/fish -n $out
      '';
    };
  writeFishAlias = name: command: writeFishScript "${name}.fish" ''
      function ${name}
        ${command}
      end
    '';
  writeSystemdService = name: command: ''
    [Unit]
    Description=${name} generated by github.com/Nekroze/dotfiles
    [Service]
    ExecStart=${command}
    Restart=on-failure
    RestartSec=3
    [Install]
    WantedBy=default.target
  '';

in mkHome rec {
  user = username;
  files = {
    ".config/termite/config".content = ''
      [options]
      font = ${preferedFont} 10
    '' + builtins.readFile "${termiteSolarized}/solarized-dark";

    ".local/share/oh-my-zsh/themes/spaceship.zsh-theme" = "${spaceship}/spaceship.zsh-theme";
    ".local/share/oh-my-zsh/plugins/zsh-syntax-highlighting" = zshSyntaxHighlighting;
    ".local/share/oh-my-zsh/plugins/zsh-autosuggestions" = zshAutoSuggestions;
    ".local/share/oh-my-zsh/plugins/zsh-explain-shell" = "${zshExplainShell}/explain-shell";
    ".local/share/oh-my-zsh/plugins/zsh-interactive-cd" = zshInteractiveCD;
    ".local/share/oh-my-zsh/plugins/nix-shell" = zshNixShell;
    ".local/share/oh-my-zsh/plugins/solarized-man" = zshSolarizedMan;
    ".zshrc".content = ''
      source ${shMarkEdit}/markedit.sh
      export DEFAULT_USER=${user}
      export ZSH=${pkgs.oh-my-zsh}/share/oh-my-zsh
      export ZSH_CUSTOM="$HOME/.local/share/oh-my-zsh/"
      ZSH_THEME="${zshTheme}"
      plugins=(
        common-aliases
        ssh-agent
        gitfast
        docker
        per-directory-history
        perms
        systemd
        web-search
        history-substring-search
        vi-like
        vi-mode
        zsh-autosuggestions
        zsh-syntax-highlighting
        zsh-explain-shell
        zsh-interactive-cd
        solarized-man
      )
      source $ZSH/oh-my-zsh.sh
      ${optionalString (zshTheme == "agnoster") "RPROMPT="}
      source ${pkgs.autojump}/share/autojump/autojump.zsh
      SPACESHIP_GIT_BRANCH_COLOR=green
      SPACESHIP_GIT_STATUS_COLOR=yellow
      SPACESHIP_EXIT_CODE_SHOW=true
      SPACESHIP_EXEC_TIME_ELAPSED=1
      SPACESHIP_CHAR_SYMBOL="=> "
      SPACESHIP_PROMPT_ORDER=(
        dir           # Current directory section
        git           # Git section (git_branch + git_status)
        line_sep      # Line break
        vi_mode       # Vi-mode indicator
        jobs          # Background jobs indicator
        char          # Prompt character
      )
      SPACESHIP_RPROMPT_ORDER=(
        exit_code     # Exit code section
        exec_time     # Execution time
        elixir        # Elixir section
        golang        # Go section
        php           # PHP section
        rust          # Rust section
        docker        # Docker section
        kubecontext   # Kubectl context section
      )
      SPACESHIP_GOLANG_SYMBOL="üê≠"
      SPACESHIP_DOCKER_SYMBOL="‚õ¥"

      export EDITOR=${preferedEditor}
      alias realvim=$(which vim)
      alias nvim=nvim
      alias vim=nvim
      alias v=nvim
      if [ "$TERM" = 'xterm-termite' ] && ! [ -f "$HOME/.terminfo/x/xterm-termite" ]; then
        export TERM='xterm-256color'
      fi
      [ -f $HOME/.localrc ] && source $HOME/.localrc
      eval $(dircolors ${solarizedDirColors}/dircolors.ansi-dark)

      function notify_formatted {
        ## $1=exit_status, $2=command, $3=elapsed_time
        [ $1 -eq 0 ] && title="Victory!" || title="Asploded!"
        notify-send "$title -- after $3 s" "$2";
      }
      bgnotify_threshold=10
      source ${zshNotify}/bgnotify.plugin.zsh
      export GOPATH="$HOME/.go"
      export PATH="$PATH:$GOPATH/bin:$HOME/.bin"
      export WORKON_HOME=$HOME/.pyvenvs
      mkdir -p $WORKON_HOME
      [ "$IN_NIX_SHELL" ] && export PS1="nix-shell@$PS1"
      alias ls="${pkgs.exa}/bin/exa"
      alias ll="${pkgs.exa}/bin/exa -l"
      alias la="${pkgs.exa}/bin/exa -la"
      alias lx="${pkgs.exa}/bin/exa -bghHliS"
      alias lt="${pkgs.exa}/bin/exa -lT"
      export PATH="$PATH:/home/${user}/.npm-packages/bin"
      source "${dotfiles}/powerline-go.zsh"
    '';
    ".Xresources".content = ''
      rofi.color-enabled:     true
      rofi.theme:             solarized
      rofi.location:          0
      rofi.font:              ${preferedFont} 10
      rofi.terminal:          ${preferedTerminal}
      rofi.case-sensitive:    false
      rofi.scroll-method:     1
      rofi.modi:              drun
      rofi.parse-known-hosts: false
      rofi.matching:          glob
    '' + builtins.readFile "${solarizedXresources}/Xresources.dark";
    ".config/vifm/colors" = vifmColors;
    ".config/dunst/dunstrc" = "${dotfiles}/dunstrc";
    ".config/nvim/init.vim".content = ''
      source ${dotfiles}/common.vim
      if filereadable(expand("$HOME/.vimrc.local"))
        source ~/.vimrc.local
      endif
    '';
    ".config/nvim/ginit.vim".content = ''
      Guifont ${preferedFont}:h9
    '';
    ".local/share/nvim/site/autoload/plug.vim" = "${vimPlug}/plug.vim";
    ".config/i3status/config" = "${dotfiles}/i3status";
    ".config/i3/config" = "${dotfiles}/i3.config";
    ".config/vifm/vifmrc".content = ''
      colorscheme ${vifmTheme}
    '';
    ".vim/autoload/plug.vim" = "${vimPlug}/plug.vim";
    ".vimrc".content = ''
      source ${dotfiles}/common.vim
      if filereadable(expand("$HOME/.vimrc.local"))
        source ~/.vimrc.local
      endif
    '';
    ".gitconfig" = "${dotfiles}/gitconfig";
    ".gitignore" = "${dotfiles}/gitignore";
    ".tmux.conf" = "${dotfiles}/tmux.conf";
    ".multitailrc" = "${dotfiles}/multitailrc";
    ".elvish/rc.elv" = "${dotfiles}/rc.elv";
    ".vim/UtiliSnips/d.snippets" = "${vimDsnips}/d.snippets";
    ".themes/numix-solarized-dark" = gtkSolarized;
    ".local/share/applications/keybase.desktop".content = mkDesktop "Keybase" "env NIX_SKIP_KEYBASE_CHECKS=1 ${pkgs.keybase-gui}/bin/keybase-gui";
    ".config/wtf/kitty.env".content = "TERM=xterm-256color";
    ".config/wtf/config.yml" = "${dotfiles}/wtf.yml";
    ".local/share/applications/wtf.desktop".content = mkDesktop "WTF" "kitty sh -c 'env $(cat /home/${user}/.config/wtf/*.env | xargs) /home/${user}/.go/bin/wtf'";
    ".config/fish/conf.d/go.fish" = writeFishScript "go.fish" ''
      set -x GOPATH $HOME/.go
      set -x PATH $PATH $GOPATH/bin
    '';
    ".config/fish/conf.d/vi.fish" = writeFishScript "vi.fish" ''
      set -U fish_key_bindings fish_vi_key_bindings
    '';
    ".config/fish/conf.d/home.bin.fish" = writeFishScript "home.bin.fish" ''
      set -x PATH $PATH $HOME/.bin
    '';
    ".config/fish/conf.d/autojump.fish" = "${pkgs.autojump}/share/autojump/autojump.fish";
    ".config/fish/functions/le.fish" = writeFishAlias "le" "${pkgs.exa}/bin/exa";
    ".config/fish/functions/ll.fish" = writeFishAlias "ll" "${pkgs.exa}/bin/exa -l";
    ".config/fish/functions/la.fish" = writeFishAlias "la" "${pkgs.exa}/bin/exa -la";
    ".config/fish/functions/lx.fish" = writeFishAlias "lx" "${pkgs.exa}/bin/exa -bghHliS";
    ".config/fish/functions/lt.fish" = writeFishAlias "lt" "${pkgs.exa}/bin/exa -lT";
    ".config/fish/functions/rvim.fish" = writeFishAlias "rvim" "${pkgs.vim}/bin/vim $argv";
    ".config/fish/functions/nvim.fish" = writeFishAlias "nvim" "nvim $argv";
    ".config/fish/functions/vim.fish" = writeFishAlias "vim" "nvim $argv";
    ".config/fish/functions/v.fish" = writeFishAlias "v" "nvim $argv";
    ".config/oni/config.tsx".content = ''
      import * as React from 'react';
      import * as Oni from 'oni-api';
      export const activate = (oni: Oni.Plugin.Api) => {
          oni.editors.anyEditor.onModeChanged.subscribe(newMode => {
              if (newMode === 'insert') {
                  oni.configuration.setValues({'vim.setting.relativenumber': false});
              } else {
                  oni.configuration.setValues({'vim.setting.relativenumber': true});
              }
          });
      };
      export const configuration = {
          'ui.colorscheme': 'solarized8_dark',
          'editor.fontFamily': "'Fira Code', FiraCode, Fira-Code",
          'oni.loadInitVim': true,
          'oni.hideMenu': true,
          'oni.plugins.prettier': {
              settings: {
                  tabWidth: 4,
                  useTabs: true,
                  singleQuote: true,
                  bracketSpacing: false,
                  printWidth: 160
              },
              formatOnSave: false,
              enabled: true
          },
          'language.php.languageServer.rootFiles': ['.git'],
          'language.php.languageServer.command': '/home/${user}/git/github.com/Nekroze/dapper/dapper',
          'language.php.languageServer.arguments': ['lsp-php'],
          'language.sh.languageServer.rootFiles': ['.git', '/home/taylorl'],
          'language.sh.languageServer.command': '/home/${user}/git/github.com/Nekroze/dapper/dapper',
          'language.sh.languageServer.arguments': ['lsp-bash'],
          'language.dockerfile.languageServer.rootFiles': ['.git'],
          'language.dockerfile.languageServer.command': '/home/${user}/git/github.com/Nekroze/dapper/dapper',
          'language.dockerfile.languageServer.arguments': ['lsp-dockerfile'],
          'language.go.languageServer.rootFiles': ['.git'],
          'language.go.languageServer.command': '/home/${user}/.go/bin/go-langserver',
          'language.go.languageServer.arguments': [
              '-gocodecompletion',
              '-freeosmemory',
              'false'
          ]
          "editor.split.mode": "oni",
          "oni.exclude": [
              "node_modules",
              "vendor",
              "vendor_perl",
              ".git",
          ],
          "editor.formatting.formatOnSwitchToNormalMode": true,
          "workspace.autoDetectWorkspace": "always",
          "sidebar.default.open": false,
          "experimental.markdownPreview.enabled": true,
      };
    '';
    ".npmrc".content = ''
      prefix=/home/${user}/.npm-packages
    '';
    ".taskrc".content = ''
      data.location=~/keybase/private/${user}/taskwarrior
      include ${pkgs.taskwarrior}/share/doc/task/rc/solarized-dark-256.theme
    '';
    ".config/kitty/kitty.conf".content = ''
      shell ${preferedShell}
      font_family ${preferedFont}
      font_size				11.0
      cursor					#586e75
      cursor_shape			block
      url_color				#2aa198
      url_style				curly
      active_border_color		#859900
      inactive_border_color	#586e75
      foreground				#839496
      background				#073642
      selection_foreground	#657b83
      selection_background	#fdf6e3
      # black
      color0	#002b36
      color8	#073642
      # red
      color1	#dc322f
      color9	#d75f00
      # green
      color2	#859900
      color10	#585858
      # yellow
      color3	#b58900
      color11	#626262
      # blue
      color4  #268bd2
      color12	#808080
      # magenta
      color5	#d33682
      color13	#5f5faf
      # cyan
      color6	#2aa198
      color14	#8a8a8a
      # white
      color7	#839496
      color15	#93a1a1
    '';
    ".config/systemd/user/i3wsr.service".content = writeSystemdService "i3wsr" "/bin/sh ${dotfiles}/i3wsr-runner.sh";
    ".config/powerline/colors.json" = "${dotfiles}/powerline/colors.json";
    ".config/powerline/themes" = "${dotfiles}/powerline/themes";
    ".config/powerline/colorschemes" = "${dotfiles}/powerline/colorschemes";
    ".config/powerline/config.json".content = ''
      {
        "common": {
            "term_truecolor":       false
        },
        "ext": {
            "wm": {
                "colorscheme":      "solarized",
                "theme":            "${variant}",
                "update_interval":  2
            }
        }
      }
    '';
  };
}
